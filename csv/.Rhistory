geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
#############################
### Function for summary  ###
#############################
Sum_prob <- function(data,title){
tier1 = paste0(sum(data$label_1=='1tierpass')/N*100,'%')
tier2 = paste0(sum(data$label_2=='2tierpass')/N*100,'%')
overall = paste0((sum(data$label_1=='1tierpass')+sum(data$label_2=='2tierpass'))/N*100,'%')
row = data.frame('DP'=title,'Pass_tier1'=tier1,'Pass_tier2'=tier2,'Pass_Overall' = overall)
}
```
```{r,echo=FALSE}
# 3. Read limits and historical data of real batches
# Read ASTM Limits
# Including x: mean value, cv: s/x/100 s:std dev
setwd("C:/Users/zhouy45/Documents/Simulation/limit")
L305095 = read.table('n30cf50cov95.csv',header = TRUE, sep = ',')
L109590 = read.table('n10cf95cov90.csv',header = TRUE, sep = ',')
limits = rbind(mutate(L109590,label='tier1AL_109590'),mutate(L305095,label='tier2AL_305095'))
# Sprycel 20mg
setwd("C:/Users/zhouy45/Documents/Simulation/data/csv")
Sprycel_20mg = read.csv('Sprycel_20mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_20mg = as.data.frame(Sprycel_20mg)
Dt_Sprycel_20mg = select(tb_Sprycel_20mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_20mg = filter(Dt_Sprycel_20mg,std != '')
Dt_Sprycel_20mg = filter(Dt_Sprycel_20mg,mean != '')
Dt_Sprycel_20mg = slice(Dt_Sprycel_20mg,2:nrow(Dt_Sprycel_20mg))
Dt_Sprycel_20mg = transmute(Dt_Sprycel_20mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_20mg = mutate(Dt_Sprycel_20mg,label = 'real')
rm(list=c("tb_Sprycel_20mg","Sprycel_20mg"))
# Sprycel 50mg
Sprycel_50mg = read.csv('Sprycel_50mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_50mg = as.data.frame(Sprycel_50mg)
Dt_Sprycel_50mg = select(tb_Sprycel_50mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_50mg = filter(Dt_Sprycel_50mg,std != '')
Dt_Sprycel_50mg = filter(Dt_Sprycel_50mg,mean != '')
Dt_Sprycel_50mg = slice(Dt_Sprycel_50mg,2:nrow(Dt_Sprycel_50mg))
Dt_Sprycel_50mg = transmute(Dt_Sprycel_50mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_50mg = mutate(Dt_Sprycel_50mg,label = 'real')
rm(list=c("tb_Sprycel_50mg","Sprycel_50mg"))
# Sprycel 70mg
Sprycel_70mg = read.csv('Sprycel_70mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_70mg = as.data.frame(Sprycel_70mg)
Dt_Sprycel_70mg = select(tb_Sprycel_70mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_70mg = filter(Dt_Sprycel_70mg,std != '')
Dt_Sprycel_70mg = filter(Dt_Sprycel_70mg,mean != '')
Dt_Sprycel_70mg = slice(Dt_Sprycel_70mg,2:nrow(Dt_Sprycel_70mg))
Dt_Sprycel_70mg = transmute(Dt_Sprycel_70mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_70mg = mutate(Dt_Sprycel_70mg,label = 'real')
rm(list=c("tb_Sprycel_70mg","Sprycel_70mg"))
# Sprycel 80mg
Sprycel_80mg = read.csv('Sprycel_80mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_80mg = as.data.frame(Sprycel_80mg)
Dt_Sprycel_80mg = select(tb_Sprycel_80mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_80mg = filter(Dt_Sprycel_80mg,std != '')
Dt_Sprycel_80mg = filter(Dt_Sprycel_80mg,mean != '')
Dt_Sprycel_80mg = slice(Dt_Sprycel_80mg,2:nrow(Dt_Sprycel_80mg))
Dt_Sprycel_80mg = transmute(Dt_Sprycel_80mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_80mg = mutate(Dt_Sprycel_80mg,label = 'real')
rm(list=c("tb_Sprycel_80mg","Sprycel_80mg"))
# Sprycel 100mg
Sprycel_100mg = read.csv('Sprycel_100mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_100mg = as.data.frame(Sprycel_100mg)
Dt_Sprycel_100mg = select(tb_Sprycel_100mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_100mg = filter(Dt_Sprycel_100mg,std != '')
Dt_Sprycel_100mg = filter(Dt_Sprycel_100mg,mean != '')
Dt_Sprycel_100mg = slice(Dt_Sprycel_100mg,2:nrow(Dt_Sprycel_100mg))
Dt_Sprycel_100mg = transmute(Dt_Sprycel_100mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_100mg = mutate(Dt_Sprycel_100mg,label = 'real')
rm(list=c("tb_Sprycel_100mg","Sprycel_100mg"))
# Sprycel 140mg
Sprycel_140mg = read.csv('Sprycel_140mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_140mg = as.data.frame(Sprycel_140mg)
Dt_Sprycel_140mg = select(tb_Sprycel_140mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_140mg = filter(Dt_Sprycel_140mg,std != '')
Dt_Sprycel_140mg = filter(Dt_Sprycel_140mg,mean != '')
Dt_Sprycel_140mg = slice(Dt_Sprycel_140mg,2:nrow(Dt_Sprycel_140mg))
Dt_Sprycel_140mg = transmute(Dt_Sprycel_140mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_140mg = mutate(Dt_Sprycel_140mg,label = 'real')
rm(list=c("tb_Sprycel_140mg","Sprycel_140mg"))
```
#Simulation of Sprycel
##1.Plot graph and dicide the distribution to use, and estimate parameters
```{r,echo=FALSE}
#4. Parameter estimation of distribution of mean and std
Table_param_Sprycel_20mg = Table_param(Dt_Sprycel_20mg,distribution='lognormal','Sprycel_20mg')
Table_param_Sprycel_50mg = Table_param(Dt_Sprycel_50mg,distribution='lognormal','Sprycel_50mg')
Table_param_Sprycel_70mg = Table_param(Dt_Sprycel_70mg,distribution='lognormal','Sprycel_70mg')
Table_param_Sprycel_80mg = Table_param(Dt_Sprycel_80mg,distribution='lognormal','Sprycel_80mg')
Table_param_Sprycel_100mg = Table_param(Dt_Sprycel_100mg,distribution='lognormal','Sprycel_100mg')
Table_param_Sprycel_140mg = Table_param(Dt_Sprycel_140mg,distribution='lognormal','Sprycel_140mg')
```
---------------------------
<center> <h3>Sprycel_20mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_20mg,'t',std_distri = 'lognormal','Sprycel_20mg')
```
<br><br>
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_20mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
```
</body>
</html>
<br><br>
-----------------------------
<center> <h3>Sprycel_50mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_50mg,'t',std_distri = 'lognormal','Sprycel_50mg')
```
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_50mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
```
</body>
</html>
<br><br>
-----------------------------
<center> <h3>Sprycel_70mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_70mg,'t',std_distri = 'lognormal','Sprycel_70mg')
```
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_70mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
```
</body>
</html>
<br><br>
-----------------------------
<center> <h3>Sprycel_80mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_80mg,'t',std_distri = 'lognormal','Sprycel_80mg')
```
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_80mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
```
</body>
</html>
<br><br>
-----------------------------
<center> <h3>Sprycel_100mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_100mg,'t',std_distri = 'lognormal','Sprycel_100mg')
```
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_100mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
```
</body>
</html>
<br><br>
-----------------------------
<center> <h3>Sprycel_140mg</h3> </center>
```{r,echo=FALSE,fig.height=7,fig.width=9}
Fit_plot(Dt_Sprycel_140mg,'t',std_distri = 'lognormal','Sprycel_140mg')
```
<!DOCTYPE html>
<html>
<head>
<style>
table, th, td {
border: 2px solid black;
border-collapse: collapse;
}
th, td {
padding: 5px;
}
th{
text-align: center;
font-size:13pt;
}
td{
text-align: center;
font-size:11pt;
}
}
table tr:nth-child(even) {
background-color: #eee;
}
table tr:nth-child(odd) {
background-color:#fff;
}
table th	{
background-color: black;
color: white;
}
</style>
</head>
<body>
```{r, results='asis', echo=FALSE}
print.xtable(xtable(Table_param_Sprycel_140mg),type='html', html.table.attributes = getOption("xtable.html.table.attributes", "border=1 style=width:80% "))
ks.test(Dt_Sprycel_20mg$mean,rnorm(nrow(Dt_Sprycel_20mg),mean = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[2]))
ks.test(Dt_Sprycel_20mg$std,rlnorm(nrow(Dt_Sprycel_20mg),meanlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_50mg$mean,rnorm(nrow(Dt_Sprycel_50mg),mean = fitdistr(Dt_Sprycel_50mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_50mg[,1],'normal')$estimate[2]))
ks.test(Dt_Sprycel_20mg$mean,pnorm(nrow(Dt_Sprycel_20mg),mean = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[2]))
ks.test(Dt_Sprycel_20mg$std,rlnorm(nrow(Dt_Sprycel_20mg),meanlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_50mg$mean,rnorm(nrow(Dt_Sprycel_50mg),mean = fitdistr(Dt_Sprycel_50mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_50mg[,1],'normal')$estimate[2]))
ks_mean_20mg <- ks.test(Dt_Sprycel_20mg$mean,pnorm(nrow(Dt_Sprycel_20mg),mean = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[2]))
ks.test(Dt_Sprycel_20mg$std,rlnorm(nrow(Dt_Sprycel_20mg),meanlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_20mg[,2],'lognormal')$estimate[2]))
ks_mean_20mg
names(ks_mean_20mg)
names(ks_mean_20mg)$p.value
ks_mean_20mg$p.value
?pnorm
ks_mean_20mg <- ks.test(Dt_Sprycel_20mg$mean,pnorm(mean = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[2]))
pnorm(50,0,1)
pnorm(1,0,1)
pnorm(0,0,1)
ks.test(Dt_Sprycel_20mg$mean,'pnorm')
ks.test((Dt_Sprycel_20mg$mean-mean(Dt_Sprycel_20mg$mean))/sd(Dt_Sprycel_20mg$mean),'pnorm')
ks.test((Dt_Sprycel_50mg$mean-mean(Dt_Sprycel_50mg$mean))/sd(Dt_Sprycel_50mg$mean),'pnorm')
ks.test((Dt_Sprycel_70mg$mean-mean(Dt_Sprycel_70mg$mean))/sd(Dt_Sprycel_70mg$mean),'pnorm')
ks_mean_20mg <- ks.test(Dt_Sprycel_20mg$mean,rnorm(100000,mean = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[1], sd = fitdistr(Dt_Sprycel_20mg[,1],'normal')$estimate[2]))
ks_mean_20mg
Table_param <- function(data, distribution, title){
# For distribution of Avg, we use t
loc = mean(data[,1])
std = sd(data[,1])
df = nrow(data)
# For distribution of Std, we use gamma or lognormal
if(distribution == 'gamma'){
shape = c(fitdistr(data[,2],"gamma")$estimate[1])
rate = c(fitdistr(data[,2],"gamma")$estimate[2])
Out_Table = data.frame('Distri'=c(paste0('Fit Mean - ','t'),paste0('Fit Std - ',distribution)),
'Parameters'=c(paste0('Loc=',loc,', Std=',std,', df=',df),
paste0('G_Shape=',shape,', G_3Rate=',rate)),
'Goodness of fit(K-S)' =
c(ks.test((data$mean-mean(data$mean))/sd(data$mean),rt(10000,df=nrow(data)-1))$p.value,
ks.test(data$std,rlnorm(10000,meanlog = fitdistr(data[,2],'lognormal')$estimate[1],
sdlog = fitdistr(data[,2],'lognormal')$estimate[2])))
)
row.names(Out_Table) = 1
}
if(distribution == 'lognormal' ){
logloc = c(fitdistr(data[,2],"lognormal")$estimate[1])
logstd = c(fitdistr(data[,2],"lognormal")$estimate[2])
Out_Table = data.frame('DP'=c(title),'Loc'=loc,'Std'=std,'df' = df,
'Log_Mu' = logloc,'Log_Sig'= logstd)
row.names(Out_Table) = 1
}
return(Out_Table)
}
Table_param <- function(data, distribution, title){
# For distribution of Avg, we use t
loc = mean(data[,1])
std = sd(data[,1])
df = nrow(data)
# For distribution of Std, we use gamma or lognormal
if(distribution == 'gamma'){
shape = c(fitdistr(data[,2],"gamma")$estimate[1])
rate = c(fitdistr(data[,2],"gamma")$estimate[2])
Out_Table = data.frame('Distri'=c(paste0('Fit Mean - ','t'),paste0('Fit Std - ',distribution)),
'Parameters'=c(paste0('Loc=',loc,', Std=',std,', df=',df),
paste0('G_Shape=',shape,', G_3Rate=',rate)),
'Goodness of fit(K-S)' =
c(ks.test((data$mean-mean(data$mean))/sd(data$mean),rt(10000,df=nrow(data)-1))$p.value,
ks.test(data$std,rlnorm(10000,meanlog = fitdistr(data[,2],'lognormal')$estimate[1],
sdlog = fitdistr(data[,2],'lognormal')$estimate[2]))$p.value)
)
row.names(Out_Table) = 1
}
if(distribution == 'lognormal' ){
logloc = c(fitdistr(data[,2],"lognormal")$estimate[1])
logstd = c(fitdistr(data[,2],"lognormal")$estimate[2])
Out_Table = data.frame('Distri'=c(paste0('Fit Mean - ','t'),paste0('Fit Std - ',distribution)),
'Parameters'=c(paste0('Loc=',loc,', Std=',std,', df=',df),
paste0('Logloc=',logloc,', Logstd=',logstd)),
'Goodness of fit(K-S)' =
c(ks.test((data$mean-mean(data$mean))/sd(data$mean),rt(10000,df=nrow(data)-1))$p.value,
ks.test(data$std,rlnorm(10000,meanlog = fitdistr(data[,2],'lognormal')$estimate[1],
sdlog = fitdistr(data[,2],'lognormal')$estimate[2]))$p.value)
)
row.names(Out_Table) = 1
}
return(Out_Table)
}
Table_param_Sprycel_20mg = Table_param(Dt_Sprycel_20mg,distribution='lognormal','Sprycel_20mg')
Table_param <- function(data, distribution, title){
# For distribution of Avg, we use t
loc = mean(data[,1])
std = sd(data[,1])
df = nrow(data)
# For distribution of Std, we use gamma or lognormal
if(distribution == 'gamma'){
shape = c(fitdistr(data[,2],"gamma")$estimate[1])
rate = c(fitdistr(data[,2],"gamma")$estimate[2])
Out_Table = data.frame('Distri'=c(paste0('Fit Mean - ','t'),paste0('Fit Std - ',distribution)),
'Parameters'=c(paste0('Loc=',loc,', Std=',std,', df=',df),
paste0('G_Shape=',shape,', G_3Rate=',rate)),
'Goodness of fit(K-S)' =
c(ks.test((data$mean-mean(data$mean))/sd(data$mean),rt(10000,df=nrow(data)-1))$p.value,
ks.test(data$std,rlnorm(10000,meanlog = fitdistr(data[,2],'lognormal')$estimate[1],
sdlog = fitdistr(data[,2],'lognormal')$estimate[2]))$p.value)
)
row.names(Out_Table) = c(1,2)
}
if(distribution == 'lognormal' ){
logloc = c(fitdistr(data[,2],"lognormal")$estimate[1])
logstd = c(fitdistr(data[,2],"lognormal")$estimate[2])
Out_Table = data.frame('Distri'=c(paste0('Fit Mean - ','t'),paste0('Fit Std - ',distribution)),
'Parameters'=c(paste0('Loc=',loc,', Std=',std,', df=',df),
paste0('Logloc=',logloc,', Logstd=',logstd)),
'Goodness of fit(K-S)' =
c(ks.test((data$mean-mean(data$mean))/sd(data$mean),rt(10000,df=nrow(data)-1))$p.value,
ks.test(data$std,rlnorm(10000,meanlog = fitdistr(data[,2],'lognormal')$estimate[1],
sdlog = fitdistr(data[,2],'lognormal')$estimate[2]))$p.value)
)
row.names(Out_Table) = c(1,2)
}
return(Out_Table)
}
Table_param_Sprycel_20mg = Table_param(Dt_Sprycel_20mg,distribution='lognormal','Sprycel_20mg')
ks.test(Dt_Sprycel_100mg$std,plnorm(nrow(Dt_Sprycel_20mg),meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std,rlnorm(10000),meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std,rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1]
fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]
rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2])
Dt_Sprycel_100mg$std
ks.test(Dt_Sprycel_80mg$std,rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std,rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
?ks.test
ks.test(rlnorm(100),rlnorm(100))
Dt_Sprycel_80mg$std
rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[2])
ks.test(rlnorm(100),rlnorm(100))
ks.test(rlnorm(100),rlnorm(10000))
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
ks.test(x, y)
ks.test(rlnorm(100),rnorm(10000))
ks.test(Dt_Sprycel_100mg$std,rlnorm(10000,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std,rlnorm(100,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_80mg$std,rlnorm(100,meanlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_80mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std[1:100],rlnorm(100,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std[1:50],rlnorm(100,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std[1:80],rlnorm(100,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
ks.test(Dt_Sprycel_100mg$std[1:70],rlnorm(100,meanlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[1], sdlog = fitdistr(Dt_Sprycel_100mg[,2],'lognormal')$estimate[2]))
