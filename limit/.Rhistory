#            "Sample ", ncomp," composites with ", mcomp, " tablets per composite" )
main <- paste("Target=100%, Batch True Mean =", mean, "% \n",
"IAL= ",LAL,"-",UAL,"%")
xlab <- paste("Composite Defective Rate (%)")
ylab <- paste("P (Pass Internal Release Limits)")
#--Line styles and colours:
## require(RColorBrewer)
col <- c("red", "chartreuse4", "blue",  "darkorchid1", "chocolate")
lty <- c(1:5)  # Line type
lwd <- 3  # Line width
#--Set up plot device:
#png("OC.png")
#--Plot curves:
xrange<-range(c(0,0.25))
yrange<-c(0,1)
windows(width=12, height=8)
plot(xrange, yrange, type="n", xlab=xlab,ylab=ylab,main=main,axes=FALSE, cex.lab=1.3)
axis(1, at=seq(from=0,to=0.5,0.025),lab=paste0(seq(from=0,to=50,2.5),"%"), las=1)
axis(2, at=seq(from=0,to=1,0.1),lab=paste0(seq(from=0,to=100,10),"%"), las=2)
box()
library(Hmisc)
minor.tick(nx=10, ny=4, tick.ratio=0.5)
abline(h=seq(0,1,0.05),v=seq(0,0.5,0.025),col='lightgray',lty=3)
#plot AQL LTPD
abline(h=c(0.1,0.95),col='black',lty=3,lwd=2)
#plot oc curves:
curve(splinefun(result$Defective,result$P.AVG.Pass, method = "monoH.FC")(x), add = TRUE, col = col[1], lty=lty[1],lwd=lwd, n = 101)
curve(splinefun(result$Defective,result$P.IND.Pass, method = "monoH.FC")(x), add = TRUE, col = col[2], lty=lty[2],lwd=lwd,n = 101)
curve(splinefun(result$Defective,result$P.CI.Pass, method = "monoH.FC")(x), add = TRUE, col = col[3], lty=lty[3],lwd=lwd,n = 101)
curve(splinefun(result$Defective,result$P.PI.Pass, method = "monoH.FC")(x), add = TRUE, col = col[4], lty=lty[4],lwd=lwd,n = 101)
curve(splinefun(result$Defective,result$P.TI.Pass, method = "monoH.FC")(x), add = TRUE, col = col[5], lty=lty[5],lwd=lwd,n = 101)
#dev.set(dev.next())
#Ideal OC
x<-c(0,0.1,0.1,0.5)
y<-c(1,1,0,0)
lines(x,y, col='black', lwd=2.7,lty=2)
#--Add legend:
TIlevel=1-TIalpha
sample=paste("(",ncomp,"x", mcomp,")",sep="")
#legend("topright",legend=c("90% CI(6x5)","95% PI(6x5)","90%/95% TI(6x5)","IND(6x5)","AVG(6x5)"), lty=lty, col=col, lwd=lwd,bty="n")
legend("topright",legend=c(paste("Average ",sample,sep=""), paste("Individual ",sample,sep=""),paste(CIlevel*100, "%CI ", sample,sep = ""),
paste(PIlevel*100, "%PI ", sample,sep = ""), paste(TIlevel*100,"%/",TIP*100,"%TI ",sample,sep = "")),
lty=lty[c(1:5)], col=col[c(1:5)], lwd=lwd,bty="n", cex=1.3)
#legend("topright",legend=c("Current 1st: IND (2x5)", "Current 2nd: IND (7x5)","Proposed 1st: IND (4x5)","Proposed 2nd: 90% CI (10x5)"), lty=lty[c(1:4)], col=col[c(1:4)], lwd=lwd,bty="n", cex=1.3)
#legend("topright",legend=c("95%CI (4x5)", "95%CI (7x5)","95%CI (10x5)", "95%CI (16x5)", "90%CI (10x5)"), lty=lty[c(2:5,1)], col=col[c(2:5,1)], lwd=lwd,bty="n", cex=1.3)
#save.image(file="n16.RData")
#savehistory()
#current practice
current=data.frame(matrix(NA,length(SD), 6 ))
colnames(current)=c("mean","SD","defective","P1","P2","P7")
current[,"mean"]=mean
current[,"SD"]=SD
current[,"defective"]=(pnorm(LAL,mean,SD/sqrt(mcomp))+1-pnorm(UAL,mean,SD/sqrt(mcomp)))
current[,"P1"]=1-current[,"defective"]
current[,"P2"]=current[,"P1"]^2
current[,"P7"]=current[,"P2"]+(1-current[,"P1"])*current[,"P1"]*(current[,"P1"]^7)
main <- paste("Target=100%, Batch True Mean =", mean, "% \n","IAL= ",LAL,"-",UAL,"%")
xlab <- paste("Composite Defective Rate (%)")
ylab <- paste("P (Pass Internal Release Limits)")
col <- c("red", "chartreuse4")
lty <- c(1:2)  # Line type
lwd <- 3  # Line width
#current practice: Plot curves:
xrange<-c(0,0.25)
yrange<-c(0,1)
windows(width=12, height=8)
plot(xrange, yrange, type="n", xlab=xlab,ylab=ylab,main=main,axes=FALSE, cex.lab=1.3)
axis(1, at=seq(from=0,to=0.5,0.025),lab=paste0(seq(from=0,to=50,2.5),"%"), las=1)
axis(2, at=seq(from=0,to=1,0.1),lab=paste0(seq(from=0,to=100,10),"%"), las=2)
box()
library(Hmisc)
minor.tick(nx=10, ny=4, tick.ratio=0.5)
abline(h=seq(0,1,0.05),v=seq(0,0.5,0.025),col='lightgray',lty=3)
#plot AQL LTPD
abline(h=c(0.1,0.95),col='black',lty=3,lwd=2)
#plot oc curves:
curve(splinefun(current$defective,current$P2, method = "monoH.FC")(x), add = TRUE, col = col[1], lty=lty[1],lwd=lwd, n = 101)
curve(splinefun(current$defective,current$P7, method = "monoH.FC")(x), add = TRUE, col = col[2], lty=lty[2],lwd=lwd,n = 101)
#Ideal Current OC
x<-c(0,0.1,0.1,0.25)
y<-c(1,1,0,0)
lines(x,y, col='black', lwd=2.7,lty=2)
legend("topright",legend=c(paste("Individual (2x5)"),paste("Individual with retest (2x5:7x5)")),
lty=lty[c(1:2)], col=col[c(1:2)], lwd=lwd,bty="n", cex=1.3)
result
current
?qtr
?qt
composite
sim.fn
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
sim.fn()
SD
set.seed(111)
sample0 <- rnorm(10,0,1)
sample1 <- rnorm(10,0,1)
sample2 <- rnorm(10,0,1)
sample3 <- rnorm(10,0,1)
sd(sample0)
sd(c(sample0,sample1,sample2))
sum(sd(sample0)+sd(sample1)+sd(sample2))
sum(sd(sample0)+sd(sample1)+sd(sample2))/3
# This R file is created for simulation with ASTM method
# 1. Set random seeds and load libraries
set.seed(1111)
library(ggplot2)
library(MASS)
library(dplyr)
library(gdata)
library(stats)
library(xtable)
library(gridExtra)
```
```{r,echo=FALSE}
# 2. Create functions needed
##########################################
### Function for fitting distributions ###
##########################################
# Fit function is used to fit parameters to certain distribution and generate fitted data.
# Input: data <=> real data, avg_distri <=> distribution of average value
#        std_distri <=> distribution of standard deviation; n <=> number of fitted data
# Output: dataframe of same structure with real data. But the value of label column is 'fit'
Fit <- function(data,avg_distri,std_distri,n=4000){
# Using different distribution and parameter according to different distribution we use
# First fit parameter to normal distributioin for Avg
if(avg_distri == 'normal'){
m = fitdistr(data[,1],'normal')$estimate[1]
s = fitdistr(data[,1],'normal')$estimate[2]
mean = round(rnorm(n,m,s),digits = 1)
}
if(avg_distri == 't'){
m = mean(data[,1])
s = sd(data[,1])
mean = round((rt(n,nrow(data)-1)*s+m),digits = 1)
}
# Then fit parameter to gamma or lognormal for Std
if(std_distri == 'gamma'){
shape = fitdistr(data[,2],'gamma')$estimate[1]
rate = fitdistr(data[,2],'gamma')$estimate[2]
std = round(rgamma(n,shape,rate),digits = 1)
}
if(std_distri == 'lognormal'){
logmean = fitdistr(data[,2],'lognormal')$estimate[1]
logstd = fitdistr(data[,2],'lognormal')$estimate[2]
std = round(rlnorm(n,logmean,logstd),digits = 1)
}
# Finally combine real data and fitted data together
label = rep('fit',n)
fit_data = cbind(mean,std,label)
data <- rbind(data,fit_data)
data <- transmute(data,mean=as.numeric(mean),std=as.numeric(std),label=label)
return(data)
}
# Fit_plot function is used to plot the marginal density of real data and fitted data
# which can help visualize the correctness of simulation
# Input: data <=> real data; avg_distri <=> distribution of average value
#        std_distri <=> distribution of standard deviation; title <=> DP name
# Output: A plot with real data and marginal density
Fit_plot <- function(data,avg_distri,std_distri,title){
# Generate and combine fitted data to real data in one dataframe
Den_data = Fit(data, avg_distri, std_distri)
# Then, generate four plot needed respectively
plot_center <- ggplot(data, aes(x=mean,y=std)) + geom_point() + ggtitle(title) +
theme(plot.title = element_text(lineheight=1.5, size = 17, face="bold"))
den_top <-  ggplot(Den_data,aes(x=mean, fill = label ))+
geom_density(alpha=.3) + scale_fill_manual(values = c("orange", "purple"))
#theme(legend.position = "none")
empty <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_blank() +
theme(axis.text = element_blank(), axis.title = element_blank(),
line = element_blank(), panel.background = element_blank())
den_right <- ggplot(Den_data,aes(x=std, fill = label ))+
geom_density(alpha=.3) + scale_fill_manual(values = c("orange", "purple")) + coord_flip()
# Arrange four plot in a good manner
grid.arrange(den_top, empty, plot_center, den_right, ncol=2, nrow=2, widths=c(8, 3), heights=c(2,7))
}
# Table_param function is used to generate table of fitted parameters to certain distribution
# Input: data <=> real data, distribution <=> the distribution specified, title <=> DP name
# Output: html table of parameters
Table_param <- function(data, distribution, title){
# For distribution of Avg, we use normal
loc = mean(data[,1])
std = sd(data[,1])
df = nrow(data)
# For distribution of Std, we use gamma or lognormal
if(distribution == 'gamma'){
shape = c(fitdistr(data[,2],"gamma")$estimate[1])
rate = c(fitdistr(data[,2],"gamma")$estimate[2])
Out_Table = data.frame('DP'=title,'Loc'=loc,'Std'=std,'df' = df,
'G_Shape' = shape,'G_Rate'= rate)
row.names(Out_Table) = 1
}
if(distribution == 'lognormal' ){
logloc = c(fitdistr(data[,2],"lognormal")$estimate[1])
logstd = c(fitdistr(data[,2],"lognormal")$estimate[2])
Out_Table = data.frame('DP'=c(title),'Loc'=loc,'Std'=std,'df' = df,
'Log_Mu' = logloc,'Log_Sig'= logstd)
row.names(Out_Table) = 1
}
return(Out_Table)
}
#####################################
### Function for data simulation  ###
#####################################
# Simulation function is used to simulate tier1 and tier2 datas
# Input: data <=> real data, limit1 <=> tier1 limit, limit2 <=> tier2 limit,
#        distribution <=> distribution for real std, N <=> number of simulation
# Output: dataframe with simulated tier1 sample mean, sample std, labels;
#         tier2 sample mean, sample std labels
Simulation <- function(data,limit1,limit2,distribution,N){
# Create variable to store the simulation result
Mean_1 = c() # Tier1 mean
Mean_2 = c() # Tier2 mean
Std_1 = c()  # Tier1 std
Std_2 = c()  # Tier2 std
Label_1 = c()# Tier1 label
Label_2 = c()# Tier2 label
for(i in 1:N){
# First simulate parameters
T_mean = rt(1,nrow(data)-1)*sd(data[,1])+mean(data[,1])
# Std may come from gamma or lognormal distribution
if (distribution == 'lognormal'){
T_std = rlnorm(1,meanlog = fitdistr(data[,2],"lognormal")$estimate[1], sdlog = fitdistr(data[,2],"lognormal")$estimate[2])}
if (distribution == 'gamma'){
T_std = rgamma(1,fitdistr(data[,2],"gamma")$estimate[1], fitdistr(data[,2],"gamma")$estimate[2]) }
# Save tier1 and tier2 sample seprately
sample_1 = rnorm(10,T_mean,T_std)
sample_2 = rnorm(20,T_mean,T_std)
sample = c(sample_1,sample_2)
# Calculate mean and variance of tier1 and tier2 samples
Mean_1[i] = mean(sample_1)
Std_1[i] = sd(sample_1)
Mean_2[i] = mean(sample)
Std_2[i] = sd(sample)
# Assign different label to different situation
# If tier1 pass, assign '1tierpass'
if (limit1[limit1$x==round(Mean_1[i],digits=1),]$s > Std_1[i]){ Label_1[i] = '1tierpass' }
# Else assign '1tierfail'
else{Label_1[i] = '1tierfail'}
# When tier1 failed, we go to tier2
if (Label_1[i] == '1tierfail'){
# If tier2 passed, assign '2tierpass
if(limit2[limit2$x==round(Mean_2[i],digits=1),]$s > Std_2[i]){Label_2[i] = '2tierpass' }              # Else assign '2tierfail'
else{Label_2[i] = '2tierfail'}
}
# When tier1 passed, assign tier2 label 'NA'
else {Label_2[i] = 'NA' }
}
# Combine all the vectors to one data frame
df <- data.frame(mean_1 = Mean_1, std_1 = Std_1,label_1 = Label_1,mean_2 = Mean_2, std_2 = Std_2, label_2=Label_2)
return(df)
}
#####################################
### Function for result plotting  ###
#####################################
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
#############################
### Function for summary  ###
#############################
Sum_prob <- function(data,title){
tier1 = paste0(sum(data$label_1=='1tierpass')/N*100,'%')
tier2 = paste0(sum(data$label_2=='2tierpass')/N*100,'%')
overall = paste0((sum(data$label_1=='1tierpass')+sum(data$label_2=='2tierpass'))/N*100,'%')
row = data.frame('DP'=title,'Pass_tier1'=tier1,'Pass_tier2'=tier2,'Pass_Overall' = overall)
}
```
```{r,echo=FALSE}
# 3. Read limits and historical data of real batches
# Read ASTM Limits
# Including x: mean value, cv: s/x/100 s:std dev
setwd("C:/Users/zhouy45/Documents/Simulation/limit")
L305095 = read.table('n30cf50cov95.csv',header = TRUE, sep = ',')
L109590 = read.table('n10cf95cov90.csv',header = TRUE, sep = ',')
L309590 = read.table('n30cf95cov90.csv',header = TRUE, sep = ',')
limits = rbind(mutate(L109590,label='tier1AL_109590'),mutate(L305095,label='tier2AL_305095'),
mutate(L309590,label='tier2AL_309590'))
# Sprycel 20mg
setwd("C:/Users/zhouy45/Documents/Simulation/data/csv")
Sprycel_20mg = read.csv('Sprycel_20mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_20mg = as.data.frame(Sprycel_20mg)
Dt_Sprycel_20mg = select(tb_Sprycel_20mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_20mg = filter(Dt_Sprycel_20mg,std != '')
Dt_Sprycel_20mg = filter(Dt_Sprycel_20mg,mean != '')
Dt_Sprycel_20mg = slice(Dt_Sprycel_20mg,2:nrow(Dt_Sprycel_20mg))
Dt_Sprycel_20mg = transmute(Dt_Sprycel_20mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_20mg = mutate(Dt_Sprycel_20mg,label = 'real')
rm(list=c("tb_Sprycel_20mg","Sprycel_20mg"))
# Sprycel 50mg
Sprycel_50mg = read.csv('Sprycel_50mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_50mg = as.data.frame(Sprycel_50mg)
Dt_Sprycel_50mg = select(tb_Sprycel_50mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_50mg = filter(Dt_Sprycel_50mg,std != '')
Dt_Sprycel_50mg = filter(Dt_Sprycel_50mg,mean != '')
Dt_Sprycel_50mg = slice(Dt_Sprycel_50mg,2:nrow(Dt_Sprycel_50mg))
Dt_Sprycel_50mg = transmute(Dt_Sprycel_50mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_50mg = mutate(Dt_Sprycel_50mg,label = 'real')
rm(list=c("tb_Sprycel_50mg","Sprycel_50mg"))
# Sprycel 70mg
Sprycel_70mg = read.csv('Sprycel_70mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_70mg = as.data.frame(Sprycel_70mg)
Dt_Sprycel_70mg = select(tb_Sprycel_70mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_70mg = filter(Dt_Sprycel_70mg,std != '')
Dt_Sprycel_70mg = filter(Dt_Sprycel_70mg,mean != '')
Dt_Sprycel_70mg = slice(Dt_Sprycel_70mg,2:nrow(Dt_Sprycel_70mg))
Dt_Sprycel_70mg = transmute(Dt_Sprycel_70mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_70mg = mutate(Dt_Sprycel_70mg,label = 'real')
rm(list=c("tb_Sprycel_70mg","Sprycel_70mg"))
# Sprycel 80mg
Sprycel_80mg = read.csv('Sprycel_80mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_80mg = as.data.frame(Sprycel_80mg)
Dt_Sprycel_80mg = select(tb_Sprycel_80mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_80mg = filter(Dt_Sprycel_80mg,std != '')
Dt_Sprycel_80mg = filter(Dt_Sprycel_80mg,mean != '')
Dt_Sprycel_80mg = slice(Dt_Sprycel_80mg,2:nrow(Dt_Sprycel_80mg))
Dt_Sprycel_80mg = transmute(Dt_Sprycel_80mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_80mg = mutate(Dt_Sprycel_80mg,label = 'real')
rm(list=c("tb_Sprycel_80mg","Sprycel_80mg"))
# Sprycel 100mg
Sprycel_100mg = read.csv('Sprycel_100mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_100mg = as.data.frame(Sprycel_100mg)
Dt_Sprycel_100mg = select(tb_Sprycel_100mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_100mg = filter(Dt_Sprycel_100mg,std != '')
Dt_Sprycel_100mg = filter(Dt_Sprycel_100mg,mean != '')
Dt_Sprycel_100mg = slice(Dt_Sprycel_100mg,2:nrow(Dt_Sprycel_100mg))
Dt_Sprycel_100mg = transmute(Dt_Sprycel_100mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_100mg = mutate(Dt_Sprycel_100mg,label = 'real')
rm(list=c("tb_Sprycel_100mg","Sprycel_100mg"))
# Sprycel 140mg
Sprycel_140mg = read.csv('Sprycel_140mg.csv',header = TRUE, sep = ',',stringsAsFactors = F)
tb_Sprycel_140mg = as.data.frame(Sprycel_140mg)
Dt_Sprycel_140mg = select(tb_Sprycel_140mg,mean = as.numeric(X), std = X.1)
Dt_Sprycel_140mg = filter(Dt_Sprycel_140mg,std != '')
Dt_Sprycel_140mg = filter(Dt_Sprycel_140mg,mean != '')
Dt_Sprycel_140mg = slice(Dt_Sprycel_140mg,2:nrow(Dt_Sprycel_140mg))
Dt_Sprycel_140mg = transmute(Dt_Sprycel_140mg,mean = as.numeric(mean), std = as.numeric(std))
Dt_Sprycel_140mg = mutate(Dt_Sprycel_140mg,label = 'real')
rm(list=c("tb_Sprycel_140mg","Sprycel_140mg"))
Table_param_Sprycel_20mg = Table_param(Dt_Sprycel_20mg,distribution='lognormal','Sprycel_20mg')
Table_param_Sprycel_50mg = Table_param(Dt_Sprycel_50mg,distribution='lognormal','Sprycel_50mg')
Table_param_Sprycel_70mg = Table_param(Dt_Sprycel_70mg,distribution='lognormal','Sprycel_70mg')
Table_param_Sprycel_80mg = Table_param(Dt_Sprycel_80mg,distribution='lognormal','Sprycel_80mg')
Table_param_Sprycel_100mg = Table_param(Dt_Sprycel_100mg,distribution='lognormal','Sprycel_100mg')
Table_param_Sprycel_140mg = Table_param(Dt_Sprycel_140mg,distribution='lognormal','Sprycel_140mg')
df_Sprycel_140mg = Simulation(Dt_Sprycel_140mg,L109590,L305095,distribution = 'lognormal',N)
N=5000
set.seed(1111)
N=5000
df_Sprycel_140mg = Simulation(Dt_Sprycel_140mg,L109590,L305095,distribution = 'lognormal',N)
View(df_Sprycel_140mg)
Sim_plot(limits,Dt_Sprycel_140mg,c(),DP='Sprycel_140mg')
df_Sprycel_140mg_0 = Simulation(Dt_Sprycel_140mg,L109590,L305095,distribution = 'lognormal',0)
df_Sprycel_140mg_0 = Simulation(Dt_Sprycel_140mg,L109590,L305095,distribution = 'lognormal',1)
View(df_Sprycel_140mg_0)
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
#geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,c(),DP='Sprycel_140mg')
Sim_plot(limits,Dt_Sprycel_140mg,c(),DP='Sprycel_140mg')
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
#geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
#geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,Dt_Sprycel_140mg,c(),DP='Sprycel_140mg')
setwd("C:/Users/zhouy45/Documents/Simulation/limit")
L305095 = read.table('n30cf50cov95.csv',header = TRUE, sep = ',')
L109590 = read.table('n10cf95cov90.csv',header = TRUE, sep = ',')
limits = rbind(mutate(L109590,label='tier1AL_109590'),mutate(L305095,label='tier2AL_305095'))
Sim_plot(limits,Dt_Sprycel_140mg,c(),DP='Sprycel_140mg')
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
#geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,Dt_Sprycel_140mg,df_Sprycel_140mg,DP='Sprycel_140mg')
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
#geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
#geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,Dt_Sprycel_140mg,c(),DP='Sprycel_140mg')
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
#geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,Dt_Sprycel_140mg,df_Sprycel_140mg,DP='Sprycel_140mg')
Sim_plot <- function(limits,real,data,DP){
plot <- ggplot() +
### plot points ###
# Tier1 points
geom_point(data=data,aes(x=mean_1, y=std_1, colour=label_1)) +
# Tier2 points
geom_point(data=data[data$label_2!='NA',],aes(x=mean_2, y=std_2, colour=label_2)) +
### plot limits ###
geom_line(data = limits,aes(x=x,y=s,group=label, colour=label),size=1) +
### assign colours ###
scale_colour_manual(values = c('tier1AL_109590'='black','tier2AL_305095' = '#CC0000',
'tier2AL_309590' = 'yellow',
'1tierfail'="#990000",'1tierpass'='#000066',
'2tierpass'="#0099CC",'2tierfail'='#FFFF99','real'='#66FF00')) +
### plot real data ###
geom_point(data=real,aes(x=mean, y=std),colour='green',size=3) +
theme(plot.title=element_text(face="italic", size=20)) +
xlab('Mean') + ylab("std") +ggtitle(paste0('Simulation of ',DP,' with ',nrow(real),' data points'))
return(plot)
}
Sim_plot(limits,Dt_Sprycel_140mg,df_Sprycel_140mg,DP='Sprycel_140mg')
